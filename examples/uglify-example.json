[
    {
        "id": "9787f001caee49e9",
        "type": "template",
        "z": "ca78ac1011bd3194",
        "name": "functioning js code",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "(function() {\n\n    function constructMermaid(nodes, redRef=undefined) {\n        var msg = {\n            payload: nodes\n        }\n\n        var nodes = msg.payload.filter((n) => {\n            return n.type != \"tab\" && n.type != \"group\"\n        })\n\n        var id2node = {};\n        for (var idx = 0; idx < nodes.length; idx++) {\n            var nd = nodes[idx];\n            id2node[nd.id] = nd;\n        }\n\n        /* redRef is a reference to RED object, if this is available, it's set, if not we \n            have to improvis. */\n        var RED = redRef;\n        if (!redRef) {\n\n            RED = {\n                nodes: {\n                    node: (nId) => { return id2node[nId] },\n                    subflow: (nId) => { return id2node[nId] }\n                },\n            }\n        }\n\n        var escapeForMermaid = (str) => {\n            return str.replaceAll(\n                \"&\", \"&amp;\"\n            ).replaceAll(\n                \"#\", \"#35;\"\n            ).replaceAll(\n                \"[\", \"#91;\"\n            ).replaceAll(\n                \"]\", \"#93;\"\n            ).replaceAll(\n                \"(\", \"#40;\"\n            ).replaceAll(\n                \")\", \"#41;\"\n            ).replaceAll(\n                \"|\", \"#124;\"\n            ).replaceAll(\n                \">\", \"&gt;\"\n            ).replaceAll(\n                \"<\", \"&lt;\"\n            ).replaceAll(\n                \"{\", \"#123;\"\n            ).replaceAll(\n                \"}\", \"#125;\"\n            ).replaceAll(\n                \"/\", \"#47;\"\n            )\n        };\n\n        var node2label = (nd, nme = undefined) => {\n            var labl = nd.name || nd.type;\n\n            if (nme) {\n                nme = \"|\" + escapeForMermaid(nme) + \"| \"\n            } else { nme = \"\" }\n\n            labl = escapeForMermaid(labl);\n\n            switch (nd.type) {\n                case \"switch\":\n                case \"join\":\n                case \"split\":\n                    return nme + nd.id + \"{\\\"\" + labl + \"\\\"}\"\n\n                case \"link call\":\n                case \"link out\":\n                    if (nd.mode && nd.mode == \"return\") {\n                        return nme + nd.id + \"[\\\\Link Return/]\"\n                    }\n\n                    if (nd.name && !nd.name.match(/^link out/)) {\n                        return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n                    }\n\n                    if (nd.linkType == \"dynamic\") {\n                        labl = \"\\\\Dynamic Target/\"\n                        return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n                    }\n\n                    var targetNode = (nd.links && nd.links.length > 0 && (id2node[nd.links[0]] || RED.nodes.node(nd.links[0])));\n                    labl = escapeForMermaid((targetNode && targetNode.name) || nd.type)\n                    return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n                case \"link in\":\n                    labl = escapeForMermaid(nd.name || (nd.links && nd.links.length > 0 && id2node[nd.links[0]] && id2node[nd.links[0]].name) || nd.type)\n                    return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n                case \"junction\":\n                    return nme + nd.id + \"((\\\"\" + labl + \"\\\"))\"\n\n                case \"debug\":\n                    return nme + nd.id + \"(\\\"\" + labl + \"\\\")\"\n\n                default:\n                    if (nd.type.startsWith(\"subflow:\")) {\n                        var targetNode = RED.nodes.subflow(nd.type.replace(/subflow:/, ''))\n                        labl = escapeForMermaid((targetNode && targetNode.name) || nd.type)\n                    }\n\n                    return nme + nd.id + \"[\\\"\" + labl + \"\\\"]\"\n            }\n        }\n\n        /* \n          we attach the mermaid array on the msg object because if an exception\n          happens, we can check how far this code got. That is by comparing the\n          contents of this array with the payload, we know which node caused\n          the exception.\n        */\n        msg.mermaid = [\n            \"%% change this to LR Node-RED like UML\",\n            \"graph \" + $('#node-input-direction').val()\n        ];\n\n        for (var idx = 0; idx < nodes.length; idx++) {\n            var nde = nodes[idx];\n\n            if (nde.links && nde.links.length > 0 && nde.type == \"link out\") {\n                for (var ldx = 0; ldx < nde.links.length; ldx++) {\n                    /* link-out wire: only add a dashed link wire iff the node is included in this graph */\n                    if (id2node[nde.links[ldx]]) {\n                        msg.mermaid.push(\n                            node2label(nde) + \" -.-> \" + nde.links[ldx]\n                        )\n                    }\n                }\n            }\n\n            if (nde.wires && nde.wires.length > 0) {\n                if (nde.type == \"switch\") {\n                    for (var odx = 0; odx < nde.wires.length; odx++) {\n                        for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                            msg.mermaid.push(\n                                node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], nde.rules[odx] && (nde.rules[odx].v || nde.rules[odx].t))\n                            )\n                        }\n                    }\n                } else {\n                    var outputLabels = nde.outputLabels;\n                    if (nde.type.startsWith(\"subflow:\")) {\n                        var targetNode = RED.nodes.subflow(nde.type.replace(/subflow:/, ''))\n                        outputLabels = (targetNode && targetNode.outputLabels) || outputLabels\n                    }\n\n                    for (var odx = 0; odx < nde.wires.length; odx++) {\n                        for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                            msg.mermaid.push(\n                                node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], (outputLabels && outputLabels[odx]) || undefined)\n                            )\n                        }\n                    }\n                }\n            }\n        }\n\n        return msg.mermaid.join(\"\\n\");\n    }\n\n    window.FlowToMermaid = {\n        constructMermaid: constructMermaid\n    }\n})();",
        "output": "str",
        "x": 827,
        "y": 646,
        "wires": [
            [
                "66021e2c9814e6d4",
                "027afa271b9a2d3e"
            ]
        ]
    },
    {
        "id": "2a74a0f9675164c3",
        "type": "inject",
        "z": "ca78ac1011bd3194",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 342,
        "y": 700,
        "wires": [
            [
                "9787f001caee49e9",
                "15b1bd3fd8c9c3f4",
                "9c7d85b4139b0ff6",
                "4c3a29d80906c57f",
                "d15845b3f4152577"
            ]
        ]
    },
    {
        "id": "3228cf712f74dfc6",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "minified code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1685,
        "y": 700,
        "wires": []
    },
    {
        "id": "15b1bd3fd8c9c3f4",
        "type": "template",
        "z": "ca78ac1011bd3194",
        "name": "incorrect js code",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 827,
        "y": 381,
        "wires": [
            [
                "66021e2c9814e6d4",
                "027afa271b9a2d3e"
            ]
        ]
    },
    {
        "id": "7b34a5800e8f40f0",
        "type": "catch",
        "z": "ca78ac1011bd3194",
        "name": "",
        "scope": [
            "66021e2c9814e6d4"
        ],
        "uncaught": false,
        "x": 1246,
        "y": 558,
        "wires": [
            [
                "630dc99513c89d9b"
            ]
        ]
    },
    {
        "id": "630dc99513c89d9b",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "incorrect js code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1695,
        "y": 558,
        "wires": []
    },
    {
        "id": "66021e2c9814e6d4",
        "type": "UglifyJS",
        "z": "ca78ac1011bd3194",
        "name": "",
        "config": "{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":false,\"warnings\":false}",
        "configType": "json",
        "x": 1240,
        "y": 597,
        "wires": [
            [
                "3228cf712f74dfc6"
            ]
        ]
    },
    {
        "id": "027afa271b9a2d3e",
        "type": "UglifyJS",
        "z": "ca78ac1011bd3194",
        "name": "incorrect config",
        "config": "failure",
        "configType": "json",
        "x": 1248,
        "y": 414,
        "wires": [
            []
        ]
    },
    {
        "id": "31488e73bfeeb096",
        "type": "catch",
        "z": "ca78ac1011bd3194",
        "name": "",
        "scope": [
            "027afa271b9a2d3e"
        ],
        "uncaught": false,
        "x": 1278,
        "y": 391,
        "wires": [
            [
                "e9405b347fcf3f13"
            ]
        ]
    },
    {
        "id": "e9405b347fcf3f13",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "incorrect config code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1705,
        "y": 391,
        "wires": []
    },
    {
        "id": "9c7d85b4139b0ff6",
        "type": "function",
        "z": "ca78ac1011bd3194",
        "name": "msg.payload as object",
        "func": "/* taken from the package examples */\nmsg.payload = {\n    \"file1.js\": \"function add(first, second) { return first + second; }\",\n    \"file2.js\": \"console.log(add(1 + 2, 3 + 4));\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 837,
        "y": 786,
        "wires": [
            [
                "79ecb629af290007"
            ]
        ]
    },
    {
        "id": "79ecb629af290007",
        "type": "UglifyJS",
        "z": "ca78ac1011bd3194",
        "name": "",
        "config": "{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":false,\"warnings\":false}",
        "configType": "json",
        "x": 1261,
        "y": 786,
        "wires": [
            [
                "cf3d8e45760587ed"
            ]
        ]
    },
    {
        "id": "cf3d8e45760587ed",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "multiple inputs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1685,
        "y": 786,
        "wires": []
    },
    {
        "id": "4c3a29d80906c57f",
        "type": "function",
        "z": "ca78ac1011bd3194",
        "name": "msg.payload as object",
        "func": "/* taken from the package examples */\nmsg.payload = {\n    \"file1.js\": \"function add(first, second) { return first + second; }\",\n    \"file2.js\": \"console.log(add(1 + 2, 3 + 4));\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 837,
        "y": 905,
        "wires": [
            [
                "2a90112c6429965f"
            ]
        ]
    },
    {
        "id": "2a90112c6429965f",
        "type": "UglifyJS",
        "z": "ca78ac1011bd3194",
        "name": "toplevel argument",
        "config": "{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":true,\"warnings\":false}",
        "configType": "json",
        "x": 1293,
        "y": 905,
        "wires": [
            [
                "411b0c47cddffbf1"
            ]
        ]
    },
    {
        "id": "411b0c47cddffbf1",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "toplevel argument true",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1705,
        "y": 905,
        "wires": []
    },
    {
        "id": "d15845b3f4152577",
        "type": "function",
        "z": "ca78ac1011bd3194",
        "name": "msg.payload as object",
        "func": "/* taken from the package examples */\nmsg.payload = {\n    \"file1.js\": \"var a = function() {};\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 837,
        "y": 1001,
        "wires": [
            [
                "2533a3cb768d500a"
            ]
        ]
    },
    {
        "id": "2533a3cb768d500a",
        "type": "UglifyJS",
        "z": "ca78ac1011bd3194",
        "name": "source map argument",
        "config": "{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":{\"filename\":\"out.js\",\"url\":\"out.js.map\"},\"nameCache\":null,\"toplevel\":false,\"warnings\":false}",
        "configType": "json",
        "x": 1287,
        "y": 1001,
        "wires": [
            [
                "f2d0f5576e5fbade"
            ]
        ]
    },
    {
        "id": "f2d0f5576e5fbade",
        "type": "debug",
        "z": "ca78ac1011bd3194",
        "name": "saucemap argument true",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1715,
        "y": 1001,
        "wires": []
    }
]